[project]
name = "aipysdk"
version = "0.0.2"
description = "Server-side implementation of the Vercel AI SDK in Python"
readme = "README.md"
license = "Apache-2.0"
authors = [
  { name = "thijmenjk", email = "thijmen@apeelingai.com" },
]
dependencies = [
    "pydantic>=2.6.1, <3",
    "typing-extensions>=4.7, <5",
    "openai>=1.12.0, <2"
]
requires-python = ">= 3.8"
classifiers = [
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
  "Operating System :: POSIX",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: Apache Software License"
]

[project.urls]
Homepage = "https://github.com/thijmenjk/aipysdk"
Repository = "https://github.com/thijmenjk/aipysdk"

[tool.rye]
managed = true
# version pins are in requirements-dev.lock
dev-dependencies = [
    "pyright",
    "mypy",
    "pytest",
    "ruff",
    "fastapi>=0.103.0, <1",
    "uvicorn[standard]>=0.15.0, <1",
]

[tool.rye.scripts]
format = { chain = [
  "format:ruff",
  "fix:ruff",
]}
"format:black" = "black ."
"format:ruff" = "ruff format"
"format:isort" = "isort ."

"lint" = { chain = [
  "check:ruff",
  "typecheck",
]}
"check:ruff" = "ruff ."
"fix:ruff" = "ruff --fix ."
typecheck = { chain = [
  "typecheck:pyright",
  "typecheck:mypy"
]}
"typecheck:pyright" = "pyright"
"typecheck:verify-types" = "pyright --verifytypes aipysdk --ignoreexternal"
"typecheck:mypy" = "mypy ."


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
  "src/*"
]

[tool.hatch.build.targets.wheel]
packages = ["src/aipysdk"]

[tool.black]
line-length = 120
target-version = ["py38"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--tb=short"
xfail_strict = true
asyncio_mode = "auto"
filterwarnings = [
  "error"
]

[tool.pyright]
# this enables practically every flag given by pyright.
# there are a couple of flags that are still disabled by
# default in strict mode as they are experimental and niche.
typeCheckingMode = "strict"
pythonVersion = "3.8"

exclude = [
    "_dev",
    ".venv",
    ".nox",
]

reportImplicitOverride = true

reportImportCycles = false
reportPrivateUsage = false

[tool.ruff]
line-length = 120
output-format = "grouped"
target-version = "py37"
select = [
  # isort
  "I",
  # bugbear rules
  "B",
  # remove unused imports
  "F401",
  # bare except statements
  "E722",
  # unused arguments
  "ARG",
  # print statements
  "T201",
  "T203",
  # misuse of typing.TYPE_CHECKING
  "TCH004"
]
ignore = [
  # mutable defaults
  "B006",
]
unfixable = [
  # disable auto fix for print statements
  "T201",
  "T203",
]
ignore-init-module-imports = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.isort]
length-sort = true
length-sort-straight = true
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
known-first-party = ["openai", "tests"]

[tool.ruff.per-file-ignores]
"bin/**.py" = ["T201", "T203"]
"tests/**.py" = ["T201", "T203"]
"examples/**.py" = ["T201", "T203"]
